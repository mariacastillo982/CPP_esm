# Training the hybrid model
model = HybridModel(cnn_input_channels=1, cnn_seq_len = 1280, node_feature_dimension=node_feature_dimension,
                    gat_hidden=128,  
                    mlp_hidden_dim=32).to(device)

# Loss and optimizer
criterion = nn.BCEWithLogitsLoss()  # for binary classification
optimizer = torch.optim.Adam(model.parameters(), lr=0.001)

# Example Training Loop
for epoch in range(num_epochs):
    model.train()
    optimizer.zero_grad()
    
    # Assume batch_data is available (e.g., (cnn_input, gat_input, edge_index, edge_attr, batch))
    cnn_input, gat_input, edge_index, edge_attr, batch = batch_data
    target = target_labels  # The target binary labels for classification
    
    # Forward pass
    outputs = model(cnn_input, gat_input, edge_index, edge_attr, batch)
    
    # Calculate loss
    loss = criterion(outputs.squeeze(), target.float())  # Assuming target is a tensor of binary labels
    
    # Backward pass and optimize
    loss.backward()
    optimizer.step()

    print(f"Epoch [{epoch+1}/{num_epochs}], Loss: {loss.item():.4f}")



#batch_x_graph.x, batch_x_graph.edge_index, batch_x_graph.edge_attr, batch_x_graph.batch